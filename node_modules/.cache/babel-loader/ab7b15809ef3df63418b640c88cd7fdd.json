{"ast":null,"code":"var _jsxFileName = \"/Users/a14079/Documents/GA/Projects/Unit-3/neighborly/React-FrontEnd-Neighborly/neighborly/src/ItemContainer/SingleItemComponent/SingleItemComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport EditItemComponent from \"./EditItemComponent/EditItemComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SingleItemComponent = props => {\n  _s();\n\n  const [showing, setShowing] = useState(false);\n\n  const toggleShowing = () => {\n    setShowing(!showing);\n  }; // // we want the form to start as filled out\n  // const [updateNeighborhood, setUpdateNeighborhood] = useState({\n  //     name: props.neighborhood.name,\n  //     location: props.neighborhood.location,\n  //     _id: props.neighborhood._id\n  // });\n  // // create a new function to listen for change, which is determined by an event, and get the value of the change\n  // const handleInputChange = (e) => {\n  //     //// e.target will target the element that you are targeting the event on\n  //     // update state\n  //     setUpdateNeighborhood ({\n  //         // we still want to keep all of the new items becuase of the preset properties\n  //         ...updateNeighborhood,\n  //         // use e.target.name to get the name of the element\n  //         [e.target.name]: e.target.value\n  //     });\n  //     console.log(updateNeighborhood);\n  // };\n  // const submitUpdateNeighborhood = (e) => {\n  //     // want to stop the page from refreshing when submit button is pressed\n  //     e.preventDefault();\n  //     props.updateNeighborhood(props.neighborhood._id, updateNeighborhood);\n  //     setShowing(false); \n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.neighborhood.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: props.neighborhood.img\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"View More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        props.deleteNeighborhood(props.neighborhood._id);\n      },\n      children: \"Delete this Neighborhood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), showing ?\n    /*#__PURE__*/\n    // <div id=\"edit-neighborhood-form\">\n    //     {/* close button for form */}\n    //     <button onClick={toggleShowing}>Close</button>\n    //     {/* we want to prevent the page from loading once we hit the submit button because we want to be able to take in that info which reloading would make it disappear */}\n    //     {/* we also want to call new item from parent */}\n    //     <form onSubmit={submitUpdateNeighborhood}>\n    //         {isValidState.valid ? null : <p className='form-error'>{isValidState.message}</p>}\n    //         Neighborhood Name: <input type=\"text\" name=\"name\" onChange={handleInputChange} value={updateNeighborhood.name}></input>\n    //         Location: <input type=\"text\" name=\"location\" onChange={handleInputChange} value={updateNeighborhood.location}></input>\n    //         Image: <input type=\"text\" name=\"img\" onChange={handleInputChange} value={updateNeighborhood.img}></input>\n    //         <br></br>\n    //         <button type=\"submit\">Submit</button>\n    //     </form>\n    // </div>\n    _jsxDEV(\"div\", {\n      id: \"edit-neighborhood-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleShowing,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(EditItemComponent, {\n        neighborhood: props.neighborhood,\n        updateNeighborhood: props.updateNeighborhood,\n        setShowing: setShowing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this) :\n    /*#__PURE__*/\n    // else, show the button to create one that also has an event listener attached\n    _jsxDEV(\"button\", {\n      onClick: toggleShowing,\n      children: \"Edit this item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SingleItemComponent, \"ZGmcKw9rD9kShTa3xksTCmQA528=\");\n\n_c = SingleItemComponent;\nexport default SingleItemComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleItemComponent\");","map":{"version":3,"sources":["/Users/a14079/Documents/GA/Projects/Unit-3/neighborly/React-FrontEnd-Neighborly/neighborly/src/ItemContainer/SingleItemComponent/SingleItemComponent.jsx"],"names":["React","useState","EditItemComponent","SingleItemComponent","props","showing","setShowing","toggleShowing","neighborhood","name","img","deleteNeighborhood","_id","updateNeighborhood"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,iBAAP,MAA8B,uCAA9B;;;AAEA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AACnC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;;AACA,QAAMM,aAAa,GAAG,MAAM;AACxBD,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACH,GAFD,CAFmC,CAKnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,sBACI;AAAA,4BACI;AAAA,gBAAKD,KAAK,CAACI,YAAN,CAAmBC;AAAxB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,GAAG,EAAEL,KAAK,CAACI,YAAN,CAAmBE;AAA7B;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAQ,MAAA,OAAO,EAAG,MAAK;AACnBN,QAAAA,KAAK,CAACO,kBAAN,CAAyBP,KAAK,CAACI,YAAN,CAAmBI,GAA5C;AACH,OAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,EAOKP,OAAO;AAAA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAK,MAAA,EAAE,EAAC,wBAAR;AAAA,8BAEI;AAAQ,QAAA,OAAO,EAAEE,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,iBAAD;AAAmB,QAAA,YAAY,EAAEH,KAAK,CAACI,YAAvC;AAAqD,QAAA,kBAAkB,EAAEJ,KAAK,CAACS,kBAA/E;AAAmG,QAAA,UAAU,EAAEP;AAA/G;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAfI;AAAA;AAqBJ;AACA;AAAQ,MAAA,OAAO,EAAEC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA7BR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkCH,CA/DD;;GAAMJ,mB;;KAAAA,mB;AAiEN,eAAeA,mBAAf","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport EditItemComponent from \"./EditItemComponent/EditItemComponent\";\n\nconst SingleItemComponent = (props) => {\n    const [showing, setShowing] = useState(false);\n    const toggleShowing = () => {\n        setShowing(!showing);\n    };\n    // // we want the form to start as filled out\n    // const [updateNeighborhood, setUpdateNeighborhood] = useState({\n    //     name: props.neighborhood.name,\n    //     location: props.neighborhood.location,\n    //     _id: props.neighborhood._id\n    // });\n    // // create a new function to listen for change, which is determined by an event, and get the value of the change\n    // const handleInputChange = (e) => {\n    //     //// e.target will target the element that you are targeting the event on\n    //     // update state\n    //     setUpdateNeighborhood ({\n    //         // we still want to keep all of the new items becuase of the preset properties\n    //         ...updateNeighborhood,\n    //         // use e.target.name to get the name of the element\n    //         [e.target.name]: e.target.value\n    //     });\n    //     console.log(updateNeighborhood);\n    // };\n    // const submitUpdateNeighborhood = (e) => {\n    //     // want to stop the page from refreshing when submit button is pressed\n    //     e.preventDefault();\n    //     props.updateNeighborhood(props.neighborhood._id, updateNeighborhood);\n    //     setShowing(false); \n    // }\n    return (\n        <div>\n            <h1>{props.neighborhood.name}</h1>\n            <img src={props.neighborhood.img}></img>\n            <button>View More</button>\n            <button onClick={ ()=> {\n                props.deleteNeighborhood(props.neighborhood._id);\n            }}>Delete this Neighborhood</button>\n            {showing ?\n                // <div id=\"edit-neighborhood-form\">\n                //     {/* close button for form */}\n                //     <button onClick={toggleShowing}>Close</button>\n                //     {/* we want to prevent the page from loading once we hit the submit button because we want to be able to take in that info which reloading would make it disappear */}\n                //     {/* we also want to call new item from parent */}\n                //     <form onSubmit={submitUpdateNeighborhood}>\n                //         {isValidState.valid ? null : <p className='form-error'>{isValidState.message}</p>}\n                //         Neighborhood Name: <input type=\"text\" name=\"name\" onChange={handleInputChange} value={updateNeighborhood.name}></input>\n                //         Location: <input type=\"text\" name=\"location\" onChange={handleInputChange} value={updateNeighborhood.location}></input>\n                //         Image: <input type=\"text\" name=\"img\" onChange={handleInputChange} value={updateNeighborhood.img}></input>\n                //         <br></br>\n                //         <button type=\"submit\">Submit</button>\n                //     </form>\n                // </div>\n                <div id=\"edit-neighborhood-form\">\n                    {/* close button for form */}\n                    <button onClick={toggleShowing}>Close</button>\n                    <EditItemComponent neighborhood={props.neighborhood} updateNeighborhood={props.updateNeighborhood} setShowing={setShowing}></EditItemComponent>\n                </div>\n                :\n                // else, show the button to create one that also has an event listener attached\n                <button onClick={toggleShowing}>Edit this item</button>\n            }\n        </div>\n    );\n};\n\nexport default SingleItemComponent;"]},"metadata":{},"sourceType":"module"}