{"ast":null,"code":"var _jsxFileName = \"/Users/a14079/Documents/GA/Projects/Unit-3/neighborly/React-FrontEnd-Neighborly/neighborly/src/ItemContainer/ItemContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport SingleItemComponent from './SingleItemComponent/SingleItemComponent';\nimport NewItemComponent from './NewItemComponent/NewItemComponent';\nimport './style.css';\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ItemContainer = () => {\n  _s();\n\n  const [neighborhoods, setNeighborhoods] = useState([]);\n  const [requestError, setRequestError] = useState(\"\");\n  const [newItemServerError, setNewItemServerError] = useState(\"\");\n  const [showing, setShowing] = useState(false);\n\n  const toggleShowing = () => {\n    setShowing(!showing);\n  }; // create new item function\n\n\n  const createNewNeighborhood = async newNeighborhood => {\n    console.log(newNeighborhood);\n    console.log('let us create this'); // send a request to the backend\n\n    const apiResponse = await fetch('http://localhost:3001/neighborhoods', {\n      method: \"POST\",\n      body: JSON.stringify(newNeighborhood),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }); // parse the response\n\n    const parsedResponse = await apiResponse.json(); // if response is success: \n\n    if (parsedResponse.status == 200) {\n      // add the new item to state\n      setNeighborhoods([parsedResponse.data, ...neighborhoods]);\n    } else {\n      //else:\n      // show the error message in the form, don't change it back\n      console.log('here');\n      console.log(parsedResponse.data);\n      setNewItemServerError(parsedResponse.data);\n    }\n  }; // create delete function\n\n\n  const deleteNeighborhood = async neighborhoodId => {\n    console.log('deleting item id');\n\n    try {\n      const apiResponse = await fetch(`http://localhost:3001/neighborhoods/${neighborhoodId}`, {\n        method: \"DELETE\"\n      });\n      const parsedResponse = await apiResponse.json();\n      console.log(parsedResponse); // was it successful in deleting?\n\n      if (parsedResponse.status == 200) {\n        // we want to return an array of new items without the deleted item\n        const newNeighborhoods = []; // loop through each item and if it matches the id of the selected item, then don't add it to the array\n\n        for (let i = 0; i < neighborhoods.length; i++) {\n          if (neighborhoods[i]._id !== neighborhoodId) {\n            newNeighborhoods.push(neighborhoods[i]);\n          }\n        } // set the items equal to this new items array\n\n\n        setNeighborhoods(newNeighborhoods);\n      } else {}\n    } catch (err) {\n      console.log(err);\n    }\n\n    ;\n  }; // fetch items from server and display them\n\n\n  const getNeighborhoods = async () => {\n    try {\n      const neighborhoods = await fetch(\"http://localhost:3001/neighborhoods\");\n      const parsedNeighborhoods = await neighborhoods.json();\n      setNeighborhoods(parsedNeighborhoods.data);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const updateNeighborhood = async (idToUpdate, neighborhoodToUpdate) => {\n    const apiResponse = await fetch(`http://localhost:3001/neighborhoods/${idToUpdate}`, {\n      method: \"PUT\",\n      body: JSON.stringify(neighborhoodToUpdate),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const parsedResponse = await apiResponse.json();\n\n    if (parsedResponse.status == 200) {\n      const newNeighborhoods = [];\n\n      for (let i = 0; i < neighborhoods.length; i++) {\n        if (neighborhoods[i]._id == idToUpdate) {\n          newNeighborhoods.push(neighborhoodToUpdate);\n        } else {\n          newNeighborhoods.push(neighborhoods[i]);\n        }\n      }\n\n      setNeighborhoods(newNeighborhoods);\n    } else {\n      setRequestError(parsedResponse.data);\n    }\n  };\n\n  useEffect(getNeighborhoods, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [neighborhoods.map(neighborhood => {\n      console.log(neighborhood._id);\n      return /*#__PURE__*/_jsxDEV(SingleItemComponent, {\n        neighborhood: neighborhood,\n        deleteNeighborhood: deleteNeighborhood,\n        updateNeighborhood: updateNeighborhood\n      }, neighborhood._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NewItemComponent, {\n      createNewNeighborhood: createNewNeighborhood,\n      newItemServerError: newItemServerError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/create\",\n          element: /*#__PURE__*/_jsxDEV(NewItemComponent, {\n            createNewNeighborhood: createNewNeighborhood,\n            newItemServerError: newItemServerError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 52\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ItemContainer, \"HCzZvB1snofYCGmlGuTWNmyXi1E=\");\n\n_c = ItemContainer;\nexport default ItemContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemContainer\");","map":{"version":3,"sources":["/Users/a14079/Documents/GA/Projects/Unit-3/neighborly/React-FrontEnd-Neighborly/neighborly/src/ItemContainer/ItemContainer.jsx"],"names":["React","useState","useEffect","SingleItemComponent","NewItemComponent","BrowserRouter","Router","Routes","Route","ItemContainer","neighborhoods","setNeighborhoods","requestError","setRequestError","newItemServerError","setNewItemServerError","showing","setShowing","toggleShowing","createNewNeighborhood","newNeighborhood","console","log","apiResponse","fetch","method","body","JSON","stringify","headers","parsedResponse","json","status","data","deleteNeighborhood","neighborhoodId","newNeighborhoods","i","length","_id","push","err","getNeighborhoods","parsedNeighborhoods","updateNeighborhood","idToUpdate","neighborhoodToUpdate","map","neighborhood"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport SingleItemComponent from './SingleItemComponent/SingleItemComponent';\nimport NewItemComponent from './NewItemComponent/NewItemComponent';\nimport './style.css';\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nconst ItemContainer = () => {\n    const [neighborhoods, setNeighborhoods] = useState([]);\n    const [requestError, setRequestError] = useState(\"\");\n    const [newItemServerError, setNewItemServerError] = useState(\"\");\n    const [showing, setShowing] = useState(false);\n    const toggleShowing = () => {\n        setShowing(!showing);\n    }\n    // create new item function\n    const createNewNeighborhood = async (newNeighborhood) => {\n        console.log(newNeighborhood);\n        console.log('let us create this');\n        // send a request to the backend\n        const apiResponse = await fetch('http://localhost:3001/neighborhoods', {\n            method: \"POST\",\n            body: JSON.stringify(newNeighborhood),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        // parse the response\n        const parsedResponse = await apiResponse.json();\n        // if response is success: \n        if (parsedResponse.status == 200) {\n            // add the new item to state\n            setNeighborhoods([parsedResponse.data, ...neighborhoods]);\n        } else {\n            //else:\n            // show the error message in the form, don't change it back\n            console.log('here');\n            console.log(parsedResponse.data);\n            setNewItemServerError(parsedResponse.data);\n        }\n    };\n    // create delete function\n    const deleteNeighborhood = async (neighborhoodId) => {\n        console.log('deleting item id');\n        try {\n            const apiResponse = await fetch(`http://localhost:3001/neighborhoods/${neighborhoodId}`, {\n                method: \"DELETE\"\n            });\n            const parsedResponse = await apiResponse.json();\n            console.log(parsedResponse);\n            // was it successful in deleting?\n            if (parsedResponse.status == 200) {\n                // we want to return an array of new items without the deleted item\n                const newNeighborhoods = [];\n                // loop through each item and if it matches the id of the selected item, then don't add it to the array\n                for (let i=0; i<neighborhoods.length; i++) {\n                    if (neighborhoods[i]._id !== neighborhoodId) {\n                        newNeighborhoods.push(neighborhoods[i]);\n                    }\n                }\n                // set the items equal to this new items array\n                setNeighborhoods(newNeighborhoods);\n            } else {\n\n            }\n        } catch (err) {\n            console.log(err);\n        };\n    }\n    // fetch items from server and display them\n    const getNeighborhoods = async () => {\n        try {\n            const neighborhoods = await fetch(\"http://localhost:3001/neighborhoods\");\n            const parsedNeighborhoods = await neighborhoods.json();\n            setNeighborhoods(parsedNeighborhoods.data);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n    const updateNeighborhood = async (idToUpdate, neighborhoodToUpdate) => {\n        const apiResponse = await fetch(`http://localhost:3001/neighborhoods/${idToUpdate}`, {\n            method: \"PUT\",\n            body: JSON.stringify(neighborhoodToUpdate),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        const parsedResponse = await apiResponse.json();\n        if (parsedResponse.status == 200) {\n            const newNeighborhoods = [];\n            for (let i=0; i<neighborhoods.length; i++) {\n                if (neighborhoods[i]._id == idToUpdate) {\n                    newNeighborhoods.push(neighborhoodToUpdate);\n                } else {\n                    newNeighborhoods.push(neighborhoods[i]);\n                }\n            }\n            setNeighborhoods(newNeighborhoods);\n        } else {\n            setRequestError(parsedResponse.data);\n        }\n        \n    }\n    useEffect(getNeighborhoods, []);\n    return (\n        <div>\n            {neighborhoods.map( (neighborhood) => {\n                console.log(neighborhood._id);\n                return (\n                    <SingleItemComponent key={neighborhood._id} neighborhood={neighborhood} deleteNeighborhood={deleteNeighborhood} updateNeighborhood={updateNeighborhood}></SingleItemComponent>\n                )\n            })}\n            <br></br>\n            <NewItemComponent createNewNeighborhood={createNewNeighborhood} newItemServerError={newItemServerError}></NewItemComponent>\n            <Router>\n                <Routes>\n                    <Route path=\"/create\" element={<NewItemComponent createNewNeighborhood={createNewNeighborhood} newItemServerError={newItemServerError} />}></Route>\n                </Routes>\n            </Router>\n        </div>\n    );\n};\n\nexport default ItemContainer;"]},"metadata":{},"sourceType":"module"}