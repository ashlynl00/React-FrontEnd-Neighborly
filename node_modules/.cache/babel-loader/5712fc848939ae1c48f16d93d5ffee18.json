{"ast":null,"code":"var _jsxFileName = \"/Users/a14079/Documents/GA/Projects/Unit-3/neighborly/React-FrontEnd-Neighborly/neighborly/src/ItemContainer/ItemContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport SingleItemComponent from './SingleItemComponent/SingleItemComponent';\nimport NewItemComponent from './NewItemComponent/NewItemComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ItemContainer = () => {\n  _s();\n\n  const [neighborhoods, setNeighborhoods] = useState([]);\n  const [newItemServerError, setNewItemServerError] = useState(\"\");\n  const [showing, setShowing] = useState(false);\n\n  const toggleShowing = () => {\n    setShowing(!showing);\n  }; // create new item function\n\n\n  const createNewNeighborhood = async newNeighborhood => {\n    console.log(newNeighborhood);\n    console.log('let us create this'); // send a request to the backend\n\n    const apiResponse = await fetch('http://localhost:3001/neighborhoods', {\n      method: \"POST\",\n      body: JSON.stringify(newNeighborhood),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }); // parse the response\n\n    const parsedResponse = await apiResponse.json(); // if response is success: \n\n    if (parsedResponse.status == 200) {\n      // add the new item to state\n      setNeighborhoods([parsedResponse.data, ...neighborhoods]);\n    } else {\n      //else:\n      // show the error message in the form, don't change it back\n      console.log('here');\n      console.log(parsedResponse.data);\n      setNewItemServerError(parsedResponse.data);\n    }\n  }; // fetch items from server and display them\n\n\n  const getNeighborhoods = async () => {\n    try {\n      const neighborhoods = await fetch(\"http://localhost:3001/neighborhoods\");\n      const parsedNeighborhoods = await neighborhoods.json();\n      setNeighborhoods(parsedNeighborhoods.data);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(getNeighborhoods, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showing ? neighborhoods.map((neighborhood, index) => {\n      return /*#__PURE__*/_jsxDEV(SingleItemComponent, {\n        neighborhood: neighborhood\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleShowing,\n      children: \"View Neighborhoods\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(NewItemComponent, {\n      createNewNeighborhood: createNewNeighborhood,\n      newItemServerError: newItemServerError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ItemContainer, \"/Lu5kCWy5TFU/y1G9Yu/+1gp5NU=\");\n\n_c = ItemContainer;\nexport default ItemContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemContainer\");","map":{"version":3,"sources":["/Users/a14079/Documents/GA/Projects/Unit-3/neighborly/React-FrontEnd-Neighborly/neighborly/src/ItemContainer/ItemContainer.jsx"],"names":["React","useState","useEffect","SingleItemComponent","NewItemComponent","ItemContainer","neighborhoods","setNeighborhoods","newItemServerError","setNewItemServerError","showing","setShowing","toggleShowing","createNewNeighborhood","newNeighborhood","console","log","apiResponse","fetch","method","body","JSON","stringify","headers","parsedResponse","json","status","data","getNeighborhoods","parsedNeighborhoods","err","map","neighborhood","index"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,mBAAP,MAAgC,2CAAhC;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;;AACA,QAAMW,aAAa,GAAG,MAAM;AACxBD,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACH,GAFD,CAJwB,CAOxB;;;AACA,QAAMG,qBAAqB,GAAG,MAAOC,eAAP,IAA2B;AACrDC,IAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAFqD,CAGrD;;AACA,UAAMC,WAAW,GAAG,MAAMC,KAAK,CAAC,qCAAD,EAAwC;AACnEC,MAAAA,MAAM,EAAE,MAD2D;AAEnEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,eAAf,CAF6D;AAGnES,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAH0D,KAAxC,CAA/B,CAJqD,CAWrD;;AACA,UAAMC,cAAc,GAAG,MAAMP,WAAW,CAACQ,IAAZ,EAA7B,CAZqD,CAarD;;AACA,QAAID,cAAc,CAACE,MAAf,IAAyB,GAA7B,EAAkC;AAC9B;AACAnB,MAAAA,gBAAgB,CAAC,CAACiB,cAAc,CAACG,IAAhB,EAAsB,GAAGrB,aAAzB,CAAD,CAAhB;AACH,KAHD,MAGO;AACH;AACA;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYQ,cAAc,CAACG,IAA3B;AACAlB,MAAAA,qBAAqB,CAACe,cAAc,CAACG,IAAhB,CAArB;AACH;AACJ,GAxBD,CARwB,CAiCxB;;;AACA,QAAMC,gBAAgB,GAAG,YAAY;AACjC,QAAI;AACA,YAAMtB,aAAa,GAAG,MAAMY,KAAK,CAAC,qCAAD,CAAjC;AACA,YAAMW,mBAAmB,GAAG,MAAMvB,aAAa,CAACmB,IAAd,EAAlC;AACAlB,MAAAA,gBAAgB,CAACsB,mBAAmB,CAACF,IAArB,CAAhB;AACH,KAJD,CAIE,OAAOG,GAAP,EAAY;AACVf,MAAAA,OAAO,CAACC,GAAR,CAAYc,GAAZ;AACH;AACJ,GARD;;AASA5B,EAAAA,SAAS,CAAC0B,gBAAD,EAAmB,EAAnB,CAAT;AACA,sBACI;AAAA,eACMlB,OAAO,GACLJ,aAAa,CAACyB,GAAd,CAAmB,CAACC,YAAD,EAAeC,KAAf,KAAyB;AACxC,0BACI,QAAC,mBAAD;AAAiC,QAAA,YAAY,EAAED;AAA/C,SAA0BC,KAA1B;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH,KAJD,CADK,gBAOL;AAAQ,MAAA,OAAO,EAAErB,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARR,eAUI,QAAC,gBAAD;AAAkB,MAAA,qBAAqB,EAAEC,qBAAzC;AAAgE,MAAA,kBAAkB,EAAEL;AAApF;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CA1DD;;GAAMH,a;;KAAAA,a;AA4DN,eAAeA,aAAf","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport SingleItemComponent from './SingleItemComponent/SingleItemComponent';\nimport NewItemComponent from './NewItemComponent/NewItemComponent';\n\nconst ItemContainer = () => {\n    const [neighborhoods, setNeighborhoods] = useState([]);\n    const [newItemServerError, setNewItemServerError] = useState(\"\");\n    const [showing, setShowing] = useState(false);\n    const toggleShowing = () => {\n        setShowing(!showing);\n    }\n    // create new item function\n    const createNewNeighborhood = async (newNeighborhood) => {\n        console.log(newNeighborhood);\n        console.log('let us create this');\n        // send a request to the backend\n        const apiResponse = await fetch('http://localhost:3001/neighborhoods', {\n            method: \"POST\",\n            body: JSON.stringify(newNeighborhood),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        // parse the response\n        const parsedResponse = await apiResponse.json();\n        // if response is success: \n        if (parsedResponse.status == 200) {\n            // add the new item to state\n            setNeighborhoods([parsedResponse.data, ...neighborhoods]);\n        } else {\n            //else:\n            // show the error message in the form, don't change it back\n            console.log('here');\n            console.log(parsedResponse.data);\n            setNewItemServerError(parsedResponse.data);\n        }\n    };\n    // fetch items from server and display them\n    const getNeighborhoods = async () => {\n        try {\n            const neighborhoods = await fetch(\"http://localhost:3001/neighborhoods\");\n            const parsedNeighborhoods = await neighborhoods.json();\n            setNeighborhoods(parsedNeighborhoods.data);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n    useEffect(getNeighborhoods, []);\n    return (\n        <div>\n            { showing ?\n                neighborhoods.map( (neighborhood, index) => {\n                    return (\n                        <SingleItemComponent key={index} neighborhood={neighborhood}></SingleItemComponent>\n                    )\n                })\n                :\n                <button onClick={toggleShowing}>View Neighborhoods</button>\n            }\n            <NewItemComponent createNewNeighborhood={createNewNeighborhood} newItemServerError={newItemServerError}></NewItemComponent>\n        </div>\n    );\n};\n\nexport default ItemContainer;"]},"metadata":{},"sourceType":"module"}